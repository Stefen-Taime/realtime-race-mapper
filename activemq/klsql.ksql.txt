-- Créer un stream pour lire les données encodées en Base64
CREATE STREAM ENCODED_STREAM (BYTES VARCHAR)
  WITH (KAFKA_TOPIC='race-mapper-confluent-topic', VALUE_FORMAT='JSON');

-- Créer un stream décodé
CREATE STREAM DECODED_STREAM AS
  SELECT FROM_BYTES(TO_BYTES(BYTES, 'BASE64'), 'UTF8') AS DECODED_PAYLOAD
  FROM ENCODED_STREAM;

-- Extraire les champs de la charge utile JSON
CREATE STREAM DATA_STREAM
WITH (KAFKA_TOPIC='DATA_STREAM', VALUE_FORMAT='JSON') AS
  SELECT
    EXTRACTJSONFIELD(DECODED_PAYLOAD, '$.who') AS WHO,
    EXTRACTJSONFIELD(DECODED_PAYLOAD, '$.timeepoc') AS TIMEEPOC,
    CAST(EXTRACTJSONFIELD(DECODED_PAYLOAD, '$.lat') AS DOUBLE) AS LAT, -- Extraction modifiée
    CAST(EXTRACTJSONFIELD(DECODED_PAYLOAD, '$.lon') AS DOUBLE) AS LON, -- Extraction modifiée
    CAST(EXTRACTJSONFIELD(DECODED_PAYLOAD, '$.alt') AS DOUBLE) AS ALT,
    EXTRACTJSONFIELD(DECODED_PAYLOAD, '$.batt') AS BATT,
    EXTRACTJSONFIELD(DECODED_PAYLOAD, '$.speed') AS SPEED
  FROM DECODED_STREAM;


-- Créer un stream avec un schéma spécifié basé sur le topic généré précédemment
create stream data_demo_stream  (who varchar, batt INTEGER, lon DOUBLE, lat DOUBLE, timeepoc BIGINT, alt DOUBLE, speed DOUBLE) 
with (kafka_topic = 'DATA_STREAM', value_format='JSON');


-- Créer une table pour calculer des statistiques sur les données
CREATE table runner_status with (value_format='JSON') AS 
select who,
  min(speed) as min_speed,
  max(speed) as max_speed,
  min(GEO_DISTANCE(CAST(lat AS DECIMAL(9,6)), CAST(lon AS DECIMAL(9,6)), -33.87014, 151.211945, 'km')) as dist_to_finish,
  count(*) as num_events 
from data_demo_stream WINDOW TUMBLING (size 5 minute) 
group by who;



-- Créer un stream pour normaliser les données de localisation
CREATE STREAM runner_location WITH (value_format='JSON') AS
SELECT who,
       timeepoc AS event_time,
       CONCAT(CAST(lat AS STRING), ',', CAST(lon AS STRING)) AS LOCATION,
       alt,
       batt,
       speed
FROM data_demo_stream;
